{
  "patterns": [
    {
      "name": "Singleton",
      "category": "Creational",
      "description": "Ensure a class has only one instance and provide a global point of access.",
      "refs": [
        "https://refactoring.guru/design-patterns/singleton",
        "https://www.geeksforgeeks.org/python/singleton-pattern-in-python-a-complete-guide/"
      ],
      "prompt_hint": "Enforce single instance; hide constructor; provide accessor; avoid globals"
    },
    {
      "name": "Observer",
      "category": "Behavioral",
      "description": "Define a one-to-many dependency so that when one object changes state, all dependents are notified.",
      "refs": [
        "https://refactoring.guru/design-patterns/observer",
        "https://github.com/faif/python-patterns/tree/master/patterns/behavioral/observer.py"
      ],
      "prompt_hint": "Decouple subject and observers; notify subscribers; avoid direct calls"
    },
    {
      "name": "Factory Method",
      "category": "Creational",
      "description": "Define an interface for creating an object, but let subclasses alter the type of objects that will be created.",
      "refs": [
        "https://refactoring.guru/design-patterns/factory-method",
        "https://github.com/faif/python-patterns/tree/master/patterns/creational/factory.py"
      ],
      "prompt_hint": "Create via factory; avoid direct constructors in clients; preserve call sites"
    },
    {
      "name": "Adapter",
      "category": "Structural",
      "description": "Allow objects with incompatible interfaces to collaborate by wrapping a class with a compatible interface.",
      "refs": [
        "https://refactoring.guru/design-patterns/adapter",
        "https://github.com/faif/python-patterns/tree/master/patterns/structural/adapter.py"
      ],
      "prompt_hint": "Stabilize client API with an adapter; delegate to existing impl; keep diff tiny",
      "contract": {
        "inputs": "Stable Target interface; client calls unchanged",
        "outputs": "Same behavior via Adaptee; no observable changes"
      }
    },
    {
      "name": "Strategy",
      "category": "Behavioral",
      "description": "Define a family of algorithms, encapsulate each one, and make them interchangeable.",
      "refs": [
        "https://refactoring.guru/design-patterns/strategy",
        "https://github.com/faif/python-patterns/tree/master/patterns/behavioral/strategy.py"
      ],
      "prompt_hint": "Extract algorithm interface; inject at seam; no public API change"
    },
    {
      "name": "Layered Architecture",
      "category": "Architecture",
      "description": "Organize system into presentation, application, domain, and infrastructure layers with strict or relaxed dependencies.",
      "refs": [
        "https://martinfowler.com/bliki/PresentationDomainDataLayering.html",
        "https://martinfowler.com/architecture/"
      ],
      "prompt_hint": "Separate presentation/application/domain/infrastructure; depend inward; avoid cross-layer leaks"
    },
    {
      "name": "Hexagonal Architecture",
      "category": "Architecture",
      "description": "Ports and adapters isolate the domain from external concerns, enabling easy substitution of UIs and infrastructure.",
      "refs": [
        "https://alistair.cockburn.us/hexagonal-architecture/",
        "https://tsh.io/blog/hexagonal-architecture/"
      ],
      "prompt_hint": "Isolate domain via ports/adapters; inject adapters; keep domain pure"
    },
    {
      "name": "Clean Architecture",
      "category": "Architecture",
      "description": "Entities, use-cases, and interface adapters arranged in concentric layers with dependency rule pointing inward.",
      "refs": [
        "https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html",
        "https://github.com/jasontaylordev/CleanArchitecture"
      ],
      "prompt_hint": "Entities/use-cases/adapters; dependencies point inward; keep boundaries explicit"
    },
    {
      "name": "Microservices",
      "category": "Architecture",
      "description": "An approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms.",
      "refs": [
        "https://martinfowler.com/articles/microservices.html",
        "https://microservices.io/patterns/microservices.html"
      ],
      "prompt_hint": "Split by bounded context; independent services; lightweight APIs; avoid shared DB"
    },
    {
      "name": "Event-Driven Architecture",
      "category": "Architecture",
      "description": "A style built around asynchronous event production, detection, consumption, and reaction.",
      "refs": [
        "https://martinfowler.com/articles/201701-event-driven.html",
        "https://learn.microsoft.com/azure/architecture/guide/architecture-styles/event-driven"
      ],
      "prompt_hint": "Decouple producers/consumers with events; async handlers; stable event contracts"
    },
    {
      "name": "CQRS",
      "category": "Architecture",
      "description": "Command Query Responsibility Segregation separates read and write models for scalability and clarity.",
      "refs": [
        "https://martinfowler.com/bliki/CQRS.html",
        "https://learn.microsoft.com/azure/architecture/patterns/cqrs"
      ],
      "prompt_hint": "Separate commands and queries; isolate write and read models; keep models thin"
    },
    {
      "name": "Bridge",
      "category": "Structural",
      "description": "Decouple an abstraction from its implementation so the two can vary independently.",
      "refs": [
        "https://refactoring.guru/design-patterns/bridge",
        "https://github.com/faif/python-patterns/blob/master/patterns/structural/bridge.py"
      ],
      "prompt_hint": "Separate Abstraction from Implementor; inject Implementor; keep Abstraction API stable"
    },
    {
      "name": "Composite",
      "category": "Structural",
      "description": "Compose objects into tree structures to represent part-whole hierarchies.",
      "refs": [
        "https://refactoring.guru/design-patterns/composite",
        "https://github.com/faif/python-patterns/blob/master/patterns/structural/composite.py"
      ],
      "prompt_hint": "Unify Leaf and Composite under Component; clients treat them uniformly; keep operation names consistent"
    },
    {
      "name": "Decorator",
      "category": "Structural",
      "description": "Attach additional responsibilities to an object dynamically as wrappers.",
      "refs": [
        "https://refactoring.guru/design-patterns/decorator",
        "https://github.com/faif/python-patterns/blob/master/patterns/structural/decorator.py"
      ],
      "prompt_hint": "Wrap Component; forward call then add behavior; do not modify Component interface"
    },
    {
      "name": "Facade",
      "category": "Structural",
      "description": "Provide a unified interface to a set of interfaces in a subsystem.",
      "refs": [
        "https://refactoring.guru/design-patterns/facade",
        "https://github.com/faif/python-patterns/blob/master/patterns/structural/facade.py"
      ],
      "prompt_hint": "Introduce a thin facade; do not leak subsystem details; keep client API stable"
    },
    {
      "name": "Flyweight",
      "category": "Structural",
      "description": "Use sharing to support large numbers of fine-grained objects efficiently.",
      "refs": [
        "https://refactoring.guru/design-patterns/flyweight",
        "https://github.com/faif/python-patterns/blob/master/patterns/structural/flyweight.py"
      ],
      "prompt_hint": "Share intrinsic state; externalize extrinsic; reuse via cache"
    },
    {
      "name": "Front Controller",
      "category": "Structural",
      "description": "Centralize request handling by routing and common processing in a single controller.",
      "refs": [
        "https://martinfowler.com/eaaCatalog/frontController.html",
        "https://github.com/faif/python-patterns/blob/master/patterns/structural/front_controller.py"
      ],
      "prompt_hint": "Centralize request handling; route to handlers; share pre/post processing"
    },
    {
      "name": "MVC",
      "category": "Structural",
      "description": "Separate concerns into Model, View, and Controller to improve modularity and testability.",
      "refs": [
        "https://martinfowler.com/eaaDev/uiArchs.html",
        "https://github.com/faif/python-patterns/blob/master/patterns/structural/mvc.py"
      ],
      "prompt_hint": "Separate concerns; keep view passive; controller mediates; avoid coupling; preserve public API"
    },
    {
      "name": "Proxy",
      "category": "Structural",
      "description": "Provide a surrogate or placeholder for another object to control access to it.",
      "refs": [
        "https://refactoring.guru/design-patterns/proxy",
        "https://github.com/faif/python-patterns/blob/master/patterns/structural/proxy.py"
      ],
      "prompt_hint": "Introduce a surrogate keeping Subject API stable; intercept for caching/logging/security"
    },
    {
      "name": "3-tier",
      "category": "Structural",
      "description": "Layer an application into presentation, logic, and data tiers (example structure).",
      "refs": [
        "https://martinfowler.com/bliki/PresentationDomainDataLayering.html",
        "https://github.com/faif/python-patterns/blob/master/patterns/structural/3-tier.py"
      ],
      "prompt_hint": "Presentation, logic, data tiers; interfaces between tiers; no backdoor coupling"
    },
    {
      "name": "Chain of Responsibility",
      "category": "Behavioral",
      "description": "Pass requests along a chain of handlers until one handles it.",
      "refs": [
        "https://refactoring.guru/design-patterns/chain-of-responsibility",
        "https://github.com/faif/python-patterns/blob/master/patterns/behavioral/chain_of_responsibility.py"
      ],
      "prompt_hint": "Link handlers; pass request along until handled; add handlers without modifying clients"
    },
    {
      "name": "Chaining Method",
      "category": "Behavioral",
      "description": "Return self from methods to allow call chaining in a fluent interface.",
      "refs": [
        "https://martinfowler.com/bliki/FluentInterface.html",
        "https://github.com/faif/python-patterns/blob/master/patterns/behavioral/chaining_method.py"
      ],
      "prompt_hint": "Return self for fluent API; keep steps small; avoid surprising side effects"
    },
    {
      "name": "Command",
      "category": "Behavioral",
      "description": "Encapsulate a request as an object, allowing parameterization and queuing.",
      "refs": [
        "https://refactoring.guru/design-patterns/command",
        "https://github.com/faif/python-patterns/blob/master/patterns/behavioral/command.py"
      ],
      "prompt_hint": "Encapsulate actions as objects; invoker queues/executes; decouple from receiver"
    },
    {
      "name": "Iterator",
      "category": "Behavioral",
      "description": "Provide a way to access elements of an aggregate object sequentially.",
      "refs": [
        "https://refactoring.guru/design-patterns/iterator",
        "https://github.com/faif/python-patterns/blob/master/patterns/behavioral/iterator.py"
      ],
      "prompt_hint": "Provide sequential access; hide collection internals; use iterator protocol"
    },
    {
      "name": "Mediator",
      "category": "Behavioral",
      "description": "Define an object that encapsulates how a set of objects interact.",
      "refs": [
        "https://refactoring.guru/design-patterns/mediator",
        "https://github.com/faif/python-patterns/blob/master/patterns/behavioral/mediator.py"
      ],
      "prompt_hint": "Encapsulate interactions in mediator; components communicate only via mediator"
    },
    {
      "name": "Memento",
      "category": "Behavioral",
      "description": "Capture and externalize an object's internal state so it can be restored later.",
      "refs": [
        "https://refactoring.guru/design-patterns/memento",
        "https://github.com/faif/python-patterns/blob/master/patterns/behavioral/memento.py"
      ],
      "prompt_hint": "Snapshot state for restore; keep originator encapsulated; small memento objects"
    },
    {
      "name": "Publish-Subscribe",
      "category": "Behavioral",
      "description": "Publish events to multiple subscribers decoupled from the publisher.",
      "refs": [
        "https://martinfowler.com/eaaDev/Observers.html",
        "https://github.com/faif/python-patterns/blob/master/patterns/behavioral/publish_subscribe.py"
      ],
      "prompt_hint": "Introduce an event bus; decouple publishers and subscribers; no direct calls; keep topics stable"
    },
    {
      "name": "Registry",
      "category": "Behavioral",
      "description": "Keep a central registry of objects or services for lookup.",
      "refs": [
        "https://martinfowler.com/eaaCatalog/Registry.html",
        "https://github.com/faif/python-patterns/blob/master/patterns/behavioral/registry.py"
      ],
      "prompt_hint": "Central lookup API; explicit register/get; avoid implicit globals"
    },
    {
      "name": "Servant",
      "category": "Behavioral",
      "description": "Provide functionality common to a group of classes via a shared servant object.",
      "refs": [
        "https://martinfowler.com/eaaCatalog/ServiceLocator.html",
        "https://github.com/faif/python-patterns/blob/master/patterns/behavioral/servant.py"
      ],
      "prompt_hint": "Extract shared functionality into a Servant; inject where needed; do not change client APIs"
    },
    {
      "name": "Specification",
      "category": "Behavioral",
      "description": "Combine business rules by chaining specifications as predicates.",
      "refs": [
        "https://martinfowler.com/apsupp/spec.pdf",
        "https://github.com/faif/python-patterns/blob/master/patterns/behavioral/specification.py"
      ],
      "prompt_hint": "Compose predicates with and/or/not; side-effect-free domain rules"
    },
    {
      "name": "State",
      "category": "Behavioral",
      "description": "Allow an object to alter its behavior when its internal state changes.",
      "refs": [
        "https://refactoring.guru/design-patterns/state",
        "https://github.com/faif/python-patterns/blob/master/patterns/behavioral/state.py"
      ],
      "prompt_hint": "Encapsulate states as objects; context delegates; explicit transitions"
    },
    {
      "name": "Template Method",
      "category": "Behavioral",
      "description": "Define the skeleton of an algorithm in a base operation, deferring steps to subclasses.",
      "refs": [
        "https://refactoring.guru/design-patterns/template-method",
        "https://github.com/faif/python-patterns/blob/master/patterns/behavioral/template.py"
      ],
      "prompt_hint": "Define algorithm skeleton in base; override steps in subclasses"
    },
    {
      "name": "Visitor",
      "category": "Behavioral",
      "description": "Represent an operation to be performed on elements of an object structure.",
      "refs": [
        "https://refactoring.guru/design-patterns/visitor",
        "https://github.com/faif/python-patterns/blob/master/patterns/behavioral/visitor.py"
      ],
      "prompt_hint": "Separate operations from structures; accept/visit; double-dispatch"
    },
    {
      "name": "Abstract Factory",
      "category": "Creational",
      "description": "Provide an interface for creating families of related objects without specifying their concrete classes.",
      "refs": [
        "https://refactoring.guru/design-patterns/abstract-factory",
        "https://github.com/faif/python-patterns/blob/master/patterns/creational/abstract_factory.py"
      ],
      "prompt_hint": "Create families of related products; hide concrete classes; keep client decoupled"
    },
    {
      "name": "Builder",
      "category": "Creational",
      "description": "Separate the construction of a complex object from its representation.",
      "refs": [
        "https://refactoring.guru/design-patterns/builder",
        "https://github.com/faif/python-patterns/blob/master/patterns/creational/builder.py"
      ],
      "prompt_hint": "Separate construction from representation; stepwise assemble; final build"
    },
    {
      "name": "Factory",
      "category": "Creational",
      "description": "Provide a method to create objects without exposing the creation logic.",
      "refs": [
        "https://refactoring.guru/design-patterns/factory-method",
        "https://github.com/faif/python-patterns/blob/master/patterns/creational/factory.py"
      ],
      "prompt_hint": "Expose factory to create products; hide creation logic; keep client decoupled"
    },
    {
      "name": "Prototype",
      "category": "Creational",
      "description": "Create new objects by copying an existing object (prototype).",
      "refs": [
        "https://refactoring.guru/design-patterns/prototype",
        "https://github.com/faif/python-patterns/blob/master/patterns/creational/prototype.py"
      ],
      "prompt_hint": "Clone existing instance; deep copy as needed; avoid constructors"
    },
    {
      "name": "Object Pool",
      "category": "Creational",
      "description": "Reuse a set of initialized objects kept ready to use.",
      "refs": [
        "https://martinfowler.com/eaaCatalog/Pool.html",
        "https://github.com/faif/python-patterns/blob/master/patterns/creational/pool.py"
      ],
      "prompt_hint": "Reuse pooled instances; acquire/release API; pre-initialize if needed"
    },
    {
      "name": "Borg",
      "category": "Creational",
      "description": "Share state across instances by assigning to the __dict__ of each instance.",
      "refs": [
        "https://github.com/faif/python-patterns/blob/master/patterns/creational/borg.py",
        "https://www.oreilly.com/library/view/python-cookbook/0596001673/ch05s23.html"
      ],
      "prompt_hint": "Share state via shared __dict__; many instances, single state"
    },
    {
      "name": "Lazy Evaluation",
      "category": "Creational",
      "description": "Defer computation until the value is needed.",
      "refs": [
        "https://martinfowler.com/bliki/LazyLoad.html",
        "https://github.com/faif/python-patterns/blob/master/patterns/creational/lazy_evaluation.py"
      ],
      "prompt_hint": "Defer computation until needed; cache the result; idempotent access"
    },
    {
      "name": "Blackboard",
      "category": "Other",
      "description": "Collaboratively solve problems using a shared global memory (blackboard).",
      "refs": [
        "https://en.wikipedia.org/wiki/Blackboard_(design_pattern)",
        "https://github.com/faif/python-patterns/blob/master/patterns/other/blackboard.py"
      ],
      "prompt_hint": "Shared knowledge base; contributors post partial results; coordinator resolves"
    },
    {
      "name": "Graph Search",
      "category": "Other",
      "description": "Implement search algorithms over graph structures (example algorithmic pattern).",
      "refs": [
        "https://en.wikipedia.org/wiki/Graph_traversal",
        "https://github.com/faif/python-patterns/blob/master/patterns/other/graph_search.py"
      ],
      "prompt_hint": "Scaffold BFS/DFS traversal; pure functions; deterministic iteration"
    },
    {
      "name": "Refactoring Techniques",
      "category": "Refactoring",
      "description": "General catalog of refactoring techniques and best practices.",
      "refs": [
        "https://refactoring.guru/refactoring/techniques",
        "https://refactoring.com/catalog/",
        "https://www.codesee.io/learning-center/code-refactoring"
      ]
    }
  ],
  "refactorings": [
    {
      "name": "Extract Function",
      "url": "https://refactoring.com/catalog/extractFunction.html",
      "prompt_hint": "Isolate a cohesive block into a named function; pure if possible; keep behavior"
    },
    {
      "name": "Inline Function",
      "url": "https://refactoring.com/catalog/inlineFunction.html",
      "prompt_hint": "Replace trivial function calls with body at call sites; simplify; preserve behavior"
    },
    {
      "name": "Change Function Declaration",
      "url": "https://refactoring.com/catalog/changeFunctionDeclaration.html",
      "prompt_hint": "Rename/reorder parameters or add defaults; maintain backward compatibility"
    },
    {
      "name": "Extract Class",
      "url": "https://refactoring.com/catalog/extractClass.html",
      "prompt_hint": "Move responsibilities to a new class; single responsibility; delegate to preserve API"
    },
    {
      "name": "Move Function",
      "url": "https://refactoring.com/catalog/moveFunction.html",
      "prompt_hint": "Relocate function to a more appropriate module/class; update imports; keep behavior"
    },
    {
      "name": "Move Field",
      "url": "https://refactoring.com/catalog/moveField.html",
      "prompt_hint": "Relocate state to its rightful owner; adjust accessors; maintain invariants"
    },
    {
      "name": "Encapsulate Variable",
      "url": "https://refactoring.com/catalog/encapsulateVariable.html",
      "prompt_hint": "Replace direct variable access with getter/setter; enforce invariants"
    },
    {
      "name": "Encapsulate Collection",
      "url": "https://refactoring.com/catalog/encapsulateCollection.html",
      "prompt_hint": "Hide collection behind add/remove/iterate API; don’t expose mutable internals"
    },
    {
      "name": "Decompose Conditional",
      "url": "https://refactoring.com/catalog/decomposeConditional.html",
      "prompt_hint": "Extract condition and branches into named functions; improve readability"
    },
    {
      "name": "Consolidate Conditional Expression",
      "url": "https://refactoring.com/catalog/consolidateConditionalExpression.html",
      "prompt_hint": "Combine equivalent outcomes; simplify branching without changing behavior"
    },
    {
      "name": "Replace Temp with Query",
      "url": "https://refactoring.com/catalog/replaceTempWithQuery.html",
      "prompt_hint": "Replace temporary variables with a query method; keep intent clear; watch performance"
    },
    {
      "name": "Replace Conditional with Polymorphism",
      "url": "https://refactoring.com/catalog/replaceConditionalWithPolymorphism.html",
      "prompt_hint": "Eliminate if/else by introducing polymorphic types/strategies; stable interface"
    },
    {
      "name": "Introduce Parameter Object",
      "url": "https://refactoring.com/catalog/introduceParameterObject.html",
      "prompt_hint": "Group related parameters into a value object; reduce long parameter lists"
    },
    {
      "name": "Replace Constructor with Factory Function",
      "url": "https://refactoring.com/catalog/replaceConstructorWithFactoryFunction.html",
      "prompt_hint": "Provide a named factory; hide complex construction; make intent explicit"
    },
    {
      "name": "Replace Loop with Pipeline",
      "url": "https://refactoring.com/catalog/replaceLoopWithPipeline.html",
      "prompt_hint": "Use map/filter/reduce/comprehensions; keep steps clear; preserve order/behavior"
    },
    {
      "name": "Split Loop",
      "url": "https://refactoring.com/catalog/splitLoop.html",
      "prompt_hint": "Separate loops by concern; simpler loops; keep overall complexity acceptable"
    },
    {
      "name": "Split Variable",
      "url": "https://refactoring.com/catalog/splitVariable.html",
      "prompt_hint": "Use distinct variables for distinct purposes; avoid reuse that obscures intent"
    },
    {
      "name": "Slide Statements",
      "url": "https://refactoring.com/catalog/slideStatements.html",
      "prompt_hint": "Move statements to maximize locality and remove duplicates; no behavior change"
    },
    {
      "name": "Substitute Algorithm",
      "url": "https://refactoring.com/catalog/substituteAlgorithm.html",
      "prompt_hint": "Replace with a clearer algorithm; maintain observed behavior; add tests"
    },
    {
      "name": "Replace Magic Literal",
      "url": "https://refactoring.com/catalog/replaceMagicLiteral.html",
      "prompt_hint": "Introduce named constants/enums for unexplained literals; improve readability"
    }
  ]
}
